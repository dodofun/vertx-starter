// source: dictionary.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.fun.dodo.common.meta.Dictionary', null, global);
goog.exportSymbol('proto.fun.dodo.common.meta.DictionaryList', null, global);
goog.exportSymbol('proto.fun.dodo.common.meta.DictionaryRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fun.dodo.common.meta.Dictionary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fun.dodo.common.meta.Dictionary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fun.dodo.common.meta.Dictionary.displayName = 'proto.fun.dodo.common.meta.Dictionary';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fun.dodo.common.meta.DictionaryList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fun.dodo.common.meta.DictionaryList.repeatedFields_, null);
};
goog.inherits(proto.fun.dodo.common.meta.DictionaryList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fun.dodo.common.meta.DictionaryList.displayName = 'proto.fun.dodo.common.meta.DictionaryList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fun.dodo.common.meta.DictionaryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fun.dodo.common.meta.DictionaryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fun.dodo.common.meta.DictionaryRequest.displayName = 'proto.fun.dodo.common.meta.DictionaryRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fun.dodo.common.meta.Dictionary.prototype.toObject = function(opt_includeInstance) {
  return proto.fun.dodo.common.meta.Dictionary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fun.dodo.common.meta.Dictionary} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fun.dodo.common.meta.Dictionary.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    ownerid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    notes: jspb.Message.getFieldWithDefault(msg, 5, ""),
    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 21, false),
    createdat: jspb.Message.getFieldWithDefault(msg, 22, 0),
    updatedat: jspb.Message.getFieldWithDefault(msg, 23, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fun.dodo.common.meta.Dictionary}
 */
proto.fun.dodo.common.meta.Dictionary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fun.dodo.common.meta.Dictionary;
  return proto.fun.dodo.common.meta.Dictionary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fun.dodo.common.meta.Dictionary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fun.dodo.common.meta.Dictionary}
 */
proto.fun.dodo.common.meta.Dictionary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOwnerid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotes(value);
      break;
    case 21:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCreatedat(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUpdatedat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fun.dodo.common.meta.Dictionary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fun.dodo.common.meta.Dictionary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fun.dodo.common.meta.Dictionary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fun.dodo.common.meta.Dictionary.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getOwnerid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getNotes();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      21,
      f
    );
  }
  f = message.getCreatedat();
  if (f !== 0) {
    writer.writeUint64(
      22,
      f
    );
  }
  f = message.getUpdatedat();
  if (f !== 0) {
    writer.writeUint64(
      23,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.fun.dodo.common.meta.Dictionary.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.fun.dodo.common.meta.Dictionary.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 ownerId = 2;
 * @return {number}
 */
proto.fun.dodo.common.meta.Dictionary.prototype.getOwnerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.fun.dodo.common.meta.Dictionary.prototype.setOwnerid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 type = 3;
 * @return {number}
 */
proto.fun.dodo.common.meta.Dictionary.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.fun.dodo.common.meta.Dictionary.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.fun.dodo.common.meta.Dictionary.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.fun.dodo.common.meta.Dictionary.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string notes = 5;
 * @return {string}
 */
proto.fun.dodo.common.meta.Dictionary.prototype.getNotes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.fun.dodo.common.meta.Dictionary.prototype.setNotes = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool enabled = 21;
 * @return {boolean}
 */
proto.fun.dodo.common.meta.Dictionary.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 21, false));
};


/** @param {boolean} value */
proto.fun.dodo.common.meta.Dictionary.prototype.setEnabled = function(value) {
  jspb.Message.setProto3BooleanField(this, 21, value);
};


/**
 * optional uint64 createdAt = 22;
 * @return {number}
 */
proto.fun.dodo.common.meta.Dictionary.prototype.getCreatedat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/** @param {number} value */
proto.fun.dodo.common.meta.Dictionary.prototype.setCreatedat = function(value) {
  jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * optional uint64 updatedAt = 23;
 * @return {number}
 */
proto.fun.dodo.common.meta.Dictionary.prototype.getUpdatedat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/** @param {number} value */
proto.fun.dodo.common.meta.Dictionary.prototype.setUpdatedat = function(value) {
  jspb.Message.setProto3IntField(this, 23, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fun.dodo.common.meta.DictionaryList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fun.dodo.common.meta.DictionaryList.prototype.toObject = function(opt_includeInstance) {
  return proto.fun.dodo.common.meta.DictionaryList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fun.dodo.common.meta.DictionaryList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fun.dodo.common.meta.DictionaryList.toObject = function(includeInstance, msg) {
  var f, obj = {
    objectList: jspb.Message.toObjectList(msg.getObjectList(),
    proto.fun.dodo.common.meta.Dictionary.toObject, includeInstance),
    count: jspb.Message.getFieldWithDefault(msg, 2, 0),
    index: jspb.Message.getFieldWithDefault(msg, 3, 0),
    size: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fun.dodo.common.meta.DictionaryList}
 */
proto.fun.dodo.common.meta.DictionaryList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fun.dodo.common.meta.DictionaryList;
  return proto.fun.dodo.common.meta.DictionaryList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fun.dodo.common.meta.DictionaryList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fun.dodo.common.meta.DictionaryList}
 */
proto.fun.dodo.common.meta.DictionaryList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.fun.dodo.common.meta.Dictionary;
      reader.readMessage(value,proto.fun.dodo.common.meta.Dictionary.deserializeBinaryFromReader);
      msg.addObject(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIndex(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fun.dodo.common.meta.DictionaryList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fun.dodo.common.meta.DictionaryList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fun.dodo.common.meta.DictionaryList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fun.dodo.common.meta.DictionaryList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjectList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.fun.dodo.common.meta.Dictionary.serializeBinaryToWriter
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * repeated Dictionary object = 1;
 * @return {!Array<!proto.fun.dodo.common.meta.Dictionary>}
 */
proto.fun.dodo.common.meta.DictionaryList.prototype.getObjectList = function() {
  return /** @type{!Array<!proto.fun.dodo.common.meta.Dictionary>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fun.dodo.common.meta.Dictionary, 1));
};


/** @param {!Array<!proto.fun.dodo.common.meta.Dictionary>} value */
proto.fun.dodo.common.meta.DictionaryList.prototype.setObjectList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.fun.dodo.common.meta.Dictionary=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fun.dodo.common.meta.Dictionary}
 */
proto.fun.dodo.common.meta.DictionaryList.prototype.addObject = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.fun.dodo.common.meta.Dictionary, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.fun.dodo.common.meta.DictionaryList.prototype.clearObjectList = function() {
  this.setObjectList([]);
};


/**
 * optional uint64 count = 2;
 * @return {number}
 */
proto.fun.dodo.common.meta.DictionaryList.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.fun.dodo.common.meta.DictionaryList.prototype.setCount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 index = 3;
 * @return {number}
 */
proto.fun.dodo.common.meta.DictionaryList.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.fun.dodo.common.meta.DictionaryList.prototype.setIndex = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 size = 4;
 * @return {number}
 */
proto.fun.dodo.common.meta.DictionaryList.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.fun.dodo.common.meta.DictionaryList.prototype.setSize = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fun.dodo.common.meta.DictionaryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fun.dodo.common.meta.DictionaryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fun.dodo.common.meta.DictionaryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fun.dodo.common.meta.DictionaryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    ownerid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    index: jspb.Message.getFieldWithDefault(msg, 5, 0),
    size: jspb.Message.getFieldWithDefault(msg, 6, 0),
    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    refresh: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fun.dodo.common.meta.DictionaryRequest}
 */
proto.fun.dodo.common.meta.DictionaryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fun.dodo.common.meta.DictionaryRequest;
  return proto.fun.dodo.common.meta.DictionaryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fun.dodo.common.meta.DictionaryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fun.dodo.common.meta.DictionaryRequest}
 */
proto.fun.dodo.common.meta.DictionaryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOwnerid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSize(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRefresh(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fun.dodo.common.meta.DictionaryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fun.dodo.common.meta.DictionaryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fun.dodo.common.meta.DictionaryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fun.dodo.common.meta.DictionaryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getOwnerid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getRefresh();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.fun.dodo.common.meta.DictionaryRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.fun.dodo.common.meta.DictionaryRequest.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 ownerId = 2;
 * @return {number}
 */
proto.fun.dodo.common.meta.DictionaryRequest.prototype.getOwnerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.fun.dodo.common.meta.DictionaryRequest.prototype.setOwnerid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 type = 3;
 * @return {number}
 */
proto.fun.dodo.common.meta.DictionaryRequest.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.fun.dodo.common.meta.DictionaryRequest.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.fun.dodo.common.meta.DictionaryRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.fun.dodo.common.meta.DictionaryRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint32 index = 5;
 * @return {number}
 */
proto.fun.dodo.common.meta.DictionaryRequest.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.fun.dodo.common.meta.DictionaryRequest.prototype.setIndex = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 size = 6;
 * @return {number}
 */
proto.fun.dodo.common.meta.DictionaryRequest.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.fun.dodo.common.meta.DictionaryRequest.prototype.setSize = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bool enabled = 7;
 * @return {boolean}
 */
proto.fun.dodo.common.meta.DictionaryRequest.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.fun.dodo.common.meta.DictionaryRequest.prototype.setEnabled = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional uint32 refresh = 8;
 * @return {number}
 */
proto.fun.dodo.common.meta.DictionaryRequest.prototype.getRefresh = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.fun.dodo.common.meta.DictionaryRequest.prototype.setRefresh = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


goog.object.extend(exports, proto.fun.dodo.common.meta);
